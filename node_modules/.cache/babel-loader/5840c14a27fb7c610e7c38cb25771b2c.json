{"ast":null,"code":"var _jsxFileName = \"D:\\\\devtask\\\\client\\\\devtask\\\\src\\\\components\\\\StatusList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { status } from \"../models/status\";\nimport { deleteStatus, initStatus, addStatus, deleteTransition, getStatuses } from \"../store/actions\";\nimport Status from './Status';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// interface StatusList Props {\nlet inputi = /*#__PURE__*/React.createRef(); // },currentstatus:status\n\nconst StatusList = props => {\n  _s();\n\n  useEffect(() => {\n    props.getStatuses();\n  }, []);\n\n  const recorphan = (arr, i, init, notorphan) => {\n    if (init === null || i == arr.length) {\n      return;\n    }\n\n    let h = arr.map(x => {\n      return x.from.name === init.name ? x.to : null;\n    });\n    i++;\n    notorphan.push(h);\n    recorphan(arr, i, h, notorphan);\n    return notorphan;\n  };\n\n  const [notor, setNotor] = useState([]);\n\n  const help = h => {\n    notor ? setNotor([...notor, h]) : setNotor([h]);\n    console.log(\"notor\", notor);\n  };\n\n  const recorphan1 = (arr, i, init) => {\n    if (init === null || i == arr.length) {\n      return;\n    }\n\n    let h = arr.map(x => {\n      return x.from.name === init.name ? x.to : null;\n    });\n    i++;\n    recorphan1(arr, i, h);\n    console.log(\"h\", h);\n    help(h);\n    return h;\n  };\n\n  console.log(props.initS);\n\n  const add = name => {\n    if (name != '') {\n      let newstatus = new status(name);\n      props.addStatus(newstatus);\n    }\n  };\n\n  const deleteStatus = status => {\n    props.deleteStatus(status);\n    props.transitionList.map(item => {\n      return item.from.name === status.name || item.to.name === status.name ? props.deleteTransition(item.name) : null;\n    });\n  };\n\n  const init = s => {\n    props.initStatus(s);\n  };\n\n  useEffect(() => {\n    // setA(recorphan1(props.transitionList,0,props.initS));\n    // console.log(\"noto\",a);\n    recorphan1(props.transitionList, 0, props.initS);\n  }, [props.initS, props.transitionList]);\n\n  const iso = item => {\n    return a ? a.map(x => {\n      return isorph && x ? x.name === item.name ? setIsorph(false) : null : null;\n    }) : null;\n  };\n\n  const [txt2, setTxt2] = useState();\n  const [a, setA] = useState([]);\n  const [isorph, setIsorph] = useState(true);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"test\",\n      ref: element => {\n        setTxt2(element);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        add(txt2 ? txt2.value : '');\n      },\n      children: \"add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 77\n    }, this), props.statusesList.map((item, i) => {\n      return /*#__PURE__*/_jsxDEV(Status, {\n        status: item,\n        delete: deleteStatus,\n        initStatus: props.initS,\n        init: init,\n        isorphf: iso,\n        isorph: isorph\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 18\n      }, this);\n    })]\n  }, void 0, true);\n};\n\n_s(StatusList, \"qgyteQEPi+xZS+DKuO1ogsrHF9U=\");\n\n_c = StatusList;\n\nconst myMapStateToProps = state => {\n  return {\n    transitionList: state.transitionPart.transitions,\n    initS: state.statusPart.init1,\n    statusesList: state.statusPart.statuses\n  };\n};\n\nexport default connect(myMapStateToProps, {\n  deleteStatus,\n  initStatus,\n  addStatus,\n  deleteTransition,\n  getStatuses\n})(StatusList);\n\nvar _c;\n\n$RefreshReg$(_c, \"StatusList\");","map":{"version":3,"sources":["D:/devtask/client/devtask/src/components/StatusList.tsx"],"names":["React","useEffect","connect","status","deleteStatus","initStatus","addStatus","deleteTransition","getStatuses","Status","useState","inputi","createRef","StatusList","props","recorphan","arr","i","init","notorphan","length","h","map","x","from","name","to","push","notor","setNotor","help","console","log","recorphan1","initS","add","newstatus","transitionList","item","s","iso","a","isorph","setIsorph","txt2","setTxt2","setA","element","value","statusesList","myMapStateToProps","state","transitionPart","transitions","statusPart","init1","statuses"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useEffect } from \"react\";\r\nimport { connect, } from 'react-redux';\r\nimport { status } from \"../models/status\";\r\n\r\nimport { deleteStatus,initStatus,addStatus, deleteTransition, getStatuses } from \"../store/actions\";\r\nimport { statusReducer } from \"../store/reducers\";\r\nimport Status from './Status';\r\nimport { useState } from \"react\";\r\nimport { transition } from \"../models/transition\";\r\nimport { hrtime } from \"process\";\r\nimport { queryHelpers } from \"@testing-library/dom\";\r\n\r\n// interface StatusList Props {\r\n let inputi = React.createRef();\r\n// },currentstatus:status\r\n\r\nconst StatusList  = (props: any) => {\r\n  useEffect(() => {\r\n  props.getStatuses();\r\n},[]);\r\nconst recorphan=(arr:transition[],i:number,init:any,notorphan:any[])=>{\r\n  if(init===null||i==arr.length){return;}\r\nlet h= arr.map((x:transition)=>{return x.from.name===init.name?x.to:null});\r\ni++;notorphan.push(h);recorphan(arr,i,h,notorphan);\r\nreturn notorphan; \r\n}\r\nconst [notor, setNotor] = useState<any[] | undefined>([]);\r\nconst help=(h:any)=>{\r\nnotor?setNotor([...notor,h]):setNotor([h]);\r\nconsole.log(\"notor\",notor);\r\n}\r\nconst recorphan1=(arr:transition[],i:number,init:any)=>{\r\n  if(init===null||i==arr.length){return;}\r\nlet h= arr.map((x:transition)=>{return x.from.name===init.name?x.to:null});\r\ni++;recorphan1(arr,i,h);console.log(\"h\",h);help(h);\r\nreturn h; \r\n}\r\n  console.log(props.initS)\r\nconst add=(name:string)=>{\r\n  if (name!=''){\r\nlet  newstatus:status=new status(name);\r\nprops.addStatus(newstatus);\r\n}\r\n}\r\nconst deleteStatus=(status:status)=>{\r\n  props.deleteStatus(status);\r\n  props.transitionList.map((item:transition)=>{return (item.from.name===status.name||item.to.name===status.name)?props.deleteTransition(item.name):null})\r\n}\r\nconst init=(s:status)=>{\r\n  props.initStatus(s);\r\n}\r\nuseEffect(() => {\r\n  // setA(recorphan1(props.transitionList,0,props.initS));\r\n  // console.log(\"noto\",a);\r\n  recorphan1(props.transitionList,0,props.initS);\r\n}, [props.initS,props.transitionList]);\r\nconst iso=(item:any)=>{return a?a.map(x=>{return isorph&&x?( x.name===item.name?setIsorph(false):null):null}):null}\r\n  const [txt2, setTxt2] = useState<HTMLInputElement|null>();\r\n  const [a, setA] = useState<any[] | undefined>([]);\r\n  const [isorph, setIsorph] = useState(true);\r\n    return  ( <>\r\n    <h1>Add status</h1>\r\n    <input type=\"test\" \tref={(element) => {  setTxt2 (element) ; }}></input><button onClick={()=>{add(txt2?txt2.value:'')}}>add</button>\r\n  {/* {setA(recorphan(props.transitionList,0,props.initS,[]))}      */}\r\n{ }\r\n {/* { props.statusesList.map((item: any, i: any)=>{\r\n   return a?a.map(x=>{return isorph&&x?(x.name===item.name?setIsorph(false):null):null}):null})}\r\n*/}\r\n { \r\n\r\nprops.statusesList.map((item: any, i: any)=>{\r\n          return <Status key={i} status={item} delete={deleteStatus} initStatus={props.initS} init={init} isorphf={iso} isorph={isorph}/>;\r\n\r\n        })   \r\n      \r\n}       \r\n        </> ) \r\n\r\n}  \r\n\r\n \r\nconst myMapStateToProps =(state:any) =>{\r\n    return{\r\n  transitionList:state.transitionPart.transitions,\r\n  initS:state.statusPart.init1,\r\n  statusesList:state.statusPart.statuses\r\n\r\n}\r\n}\r\n\r\nexport default connect(myMapStateToProps,{deleteStatus,initStatus,addStatus,deleteTransition,getStatuses})(StatusList); \r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}