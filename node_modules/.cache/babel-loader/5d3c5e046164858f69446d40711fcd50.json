{"ast":null,"code":"import { transition } from \"../../models/transition\";\nimport { status } from '../../models/status';\nimport { connect } from \"react-redux\";\nimport { useState } from \"react\";\nconst [statusList, setstatusList] = useState([]); //should connect to status reducer\n\nconst f = props => {\n  let d = props.stasusList;\n  setstatusList(d);\n  return null;\n};\n\nconst initilize = {\n  transitions: [new transition(\"a\", new status(\"start\"), new status(\"cancle\")), new transition(\"b\", statusList[0], statusList[1])] // statusList?statusList:\n\n};\nexport const transitionReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initilize;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"TRANSITIONADD\":\n      //if from and to exists in songlist\n      let from = statusList.map(s => {\n        return s.name === action.payloud.from.name ? s : null;\n      });\n      let to = statusList.map(s => {\n        return s.name === action.payloud.to.name ? s : null;\n      });\n      let obj = { ...state\n      };\n      to ? from ? obj = { ...state,\n        transitions: [...state.transitions, action.payloud]\n      } : null : null;\n      return obj;\n\n    case \"TRANSITIONDELETE\":\n      //    let s1= state.songs.filter(s=>{s===action.payloud})\n      //    state.songs.map((s,i=>{s===s1?state.songs.splice(i,1):null}))\n      let list = state.transitions.filter(t => {\n        return t.name !== action.payloud.name;\n      });\n      return { ...state,\n        transitions: list\n      };\n  }\n\n  return state;\n};\n\nfunction myMapStateToProps(state) {\n  return {\n    statusList: state.statusPart.statuses\n  };\n}\n\nexport default connect(myMapStateToProps, {})(f);","map":{"version":3,"sources":["D:/devtask/client/devtask/src/store/reducers/transition.ts"],"names":["transition","status","connect","useState","statusList","setstatusList","f","props","d","stasusList","initilize","transitions","transitionReducer","state","action","type","from","map","s","name","payloud","to","obj","list","filter","t","myMapStateToProps","statusPart","statuses"],"mappings":"AAAA,SAASA,UAAT,QAA2B,yBAA3B;AACA,SAAQC,MAAR,QAAoB,qBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BF,QAAQ,CAAW,EAAX,CAA5C,C,CACA;;AACA,MAAMG,CAAC,GAAEC,KAAD,IAAa;AAChB,MAAIC,CAAU,GAACD,KAAK,CAACE,UAArB;AAAgCJ,EAAAA,aAAa,CAACG,CAAD,CAAb;AACrC,SAAO,IAAP;AAEC,CAJD;;AAMC,MAAME,SAAS,GAAC;AACbC,EAAAA,WAAW,EAAC,CAAC,IAAIX,UAAJ,CAAe,GAAf,EAAmB,IAAIC,MAAJ,CAAW,OAAX,CAAnB,EAAuC,IAAIA,MAAJ,CAAW,QAAX,CAAvC,CAAD,EAA8D,IAAID,UAAJ,CAAe,GAAf,EAAmBI,UAAU,CAAC,CAAD,CAA7B,EAAiCA,UAAU,CAAC,CAAD,CAA3C,CAA9D,CADC,CAEjB;;AAFiB,CAAhB;AAIA,OAAO,MAAMQ,iBAAiB,GAAC,YAA8D;AAAA,MAA7DC,KAA6D,uEAAvDH,SAAuD;AAAA,MAA7CI,MAA6C;;AAC1F,UAAOA,MAAM,CAACC,IAAd;AACC,SAAK,eAAL;AACI;AACH,UAAIC,IAAI,GAAIZ,UAAU,CAACa,GAAX,CAAeC,CAAC,IAAE;AAAC,eAAOA,CAAC,CAACC,IAAF,KAASL,MAAM,CAACM,OAAP,CAAeJ,IAAf,CAAoBG,IAA7B,GAAkCD,CAAlC,GAAoC,IAA3C;AAAgD,OAAnE,CAAZ;AACA,UAAIG,EAAE,GAAEjB,UAAU,CAACa,GAAX,CAAeC,CAAC,IAAE;AAAC,eAAOA,CAAC,CAACC,IAAF,KAASL,MAAM,CAACM,OAAP,CAAeC,EAAf,CAAkBF,IAA3B,GAAgCD,CAAhC,GAAkC,IAAzC;AAA8C,OAAjE,CAAR;AACA,UAAII,GAAG,GAAC,EAAC,GAAGT;AAAJ,OAAR;AACHQ,MAAAA,EAAE,GAACL,IAAI,GAAIM,GAAG,GAAC,EAAC,GAAGT,KAAJ;AAAUF,QAAAA,WAAW,EAAC,CAAC,GAAGE,KAAK,CAACF,WAAV,EAAsBG,MAAM,CAACM,OAA7B;AAAtB,OAAR,GAAsE,IAA3E,GAAgF,IAAlF;AACA,aAAOE,GAAP;;AAEC,SAAK,kBAAL;AACA;AACA;AACA,UAAIC,IAAI,GAAEV,KAAK,CAACF,WAAN,CAAkBa,MAAlB,CAAyBC,CAAC,IAAE;AAAC,eAAOA,CAAC,CAACN,IAAF,KAASL,MAAM,CAACM,OAAP,CAAeD,IAA/B;AAAoC,OAAjE,CAAV;AACI,aAAM,EAAC,GAAGN,KAAJ;AAAUF,QAAAA,WAAW,EAACY;AAAtB,OAAN;AAbJ;;AAeJ,SAAOV,KAAP;AACC,CAjBO;;AAkBR,SAASa,iBAAT,CAA4Bb,KAA5B,EAAwC;AACtC,SAAM;AAAGT,IAAAA,UAAU,EAACS,KAAK,CAACc,UAAN,CAAiBC;AAA/B,GAAN;AACD;;AAED,eAAe1B,OAAO,CAACwB,iBAAD,EAAmB,EAAnB,CAAP,CAA8BpB,CAA9B,CAAf","sourcesContent":["import { transition } from \"../../models/transition\"\r\nimport {status}from '../../models/status'\r\nimport { connect } from \"react-redux\"\r\nimport { useState } from \"react\";\r\nconst [statusList, setstatusList] = useState<status[]>([]);\r\n//should connect to status reducer\r\nconst f=(props:any)=>{\r\n     let d:status[]=props.stasusList;setstatusList(d)\r\nreturn(null)\r\n\r\n}\r\n\r\n const initilize={\r\n    transitions:[new transition(\"a\",new status(\"start\"),new status(\"cancle\")),new transition(\"b\",statusList[0],statusList[1])]\r\n// statusList?statusList:\r\n}\r\n export const transitionReducer=(state=initilize,action: { type: any; payloud: transition })=>{\r\n    switch(action.type){\r\n     case \"TRANSITIONADD\":\r\n         //if from and to exists in songlist\r\n      let from=   statusList.map(s=>{return s.name===action.payloud.from.name?s:null});\r\n      let to =statusList.map(s=>{return s.name===action.payloud.to.name?s:null});\r\n      let obj={...state}\r\n   to?from?(  obj={...state,transitions:[...state.transitions,action.payloud]}):null:null\r\n   return obj\r\n   \r\n    case \"TRANSITIONDELETE\":\r\n    //    let s1= state.songs.filter(s=>{s===action.payloud})\r\n    //    state.songs.map((s,i=>{s===s1?state.songs.splice(i,1):null}))\r\n    let list= state.transitions.filter(t=>{return t.name!==action.payloud.name})\r\n        return{...state,transitions:list}\r\n}\r\nreturn state;\r\n}\r\nfunction myMapStateToProps( state: any) {\r\n  return{  statusList:state.statusPart.statuses}\r\n}\r\n\r\nexport default connect(myMapStateToProps,{})(f); \r\n\r\n"]},"metadata":{},"sourceType":"module"}