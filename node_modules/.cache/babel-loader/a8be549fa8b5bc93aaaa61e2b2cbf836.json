{"ast":null,"code":"var _jsxFileName = \"D:\\\\devtask\\\\client\\\\devtask\\\\src\\\\components\\\\StatusList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { status } from \"../models/status\";\nimport { deleteStatus, initStatus, addStatus, deleteTransition, getStatuses } from \"../store/actions\";\nimport Status from './Status';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n// interface StatusList Props {\n//let inputi = React.createRef();\n// },currentstatus:status\nconst StatusList = props => {\n  _s();\n\n  useEffect(() => {\n    props.getStatuses();\n  }, []); // const recorphan=(arr:transition[],i:number,init:any,notorphan:any[])=>{\n  //   if(init===null||i==arr.length){return;}\n  // let h= arr.map((x:transition)=>{return x.from.name===init.name?x.to:null});\n  // i++;notorphan.push(h);recorphan(arr,i,h,notorphan);\n  // return notorphan; \n  // }\n  //const [notor, setNotor] = useState<any[] | undefined>();\n  // const help=(h:any)=>{\n  // notor?setNotor([...notor,h]):setNotor([h]);\n  // console.log(\"notor\",notor);\n  // }\n  // let arr:(status|null)[]=[];\n  // const recorphan1=(arr:transition[],i:number,init:any)=>{\n  //   if(init===null||i==arr.length){return;}\n  // let h= arr.map((x:transition)=>{return x.from.name===init.name?x.to:null});\n  // i++;recorphan1(arr,i,h);\n  // (h);console.log(\"h\",h);\n  // return h; \n  // }\n\n  console.log(props.initS);\n\n  const add = name => {\n    if (name != '') {\n      let newstatus = new status(name);\n      props.addStatus(newstatus);\n    }\n  };\n\n  const deleteStatus = status => {\n    props.deleteStatus(status);\n    props.transitionList.map(item => {\n      return item.from.name === status.name || item.to.name === status.name ? props.deleteTransition(item.name) : null;\n    });\n  };\n\n  const init = s => {\n    props.initStatus(s);\n  }; // const [b, setb] = useState(toarr.indexOf(item)>=0?true:false);\n\n\n  const [not, setNot] = useState();\n  const [all, setAll] = useState();\n  const [fromarr, setFromarr] = useState();\n  const [toarr, setToarr] = useState();\n  const [ini, setIni] = useState();\n  const [start, setStart] = useState(props.initS);\n\n  const noto = () => {\n    setFromarr(props.transitionList.map((f, i) => {\n      return f.from;\n    }));\n    setToarr(props.transitionList.map((t, i) => {\n      return t.to;\n    }));\n    console.log(fromarr, toarr, \"arraies\");\n  };\n\n  const isfinal = item => {\n    console.log(\"toarr\", toarr, item);\n    if (toarr && toarr.includes(item)) return false;else return true;\n  };\n\n  useEffect(() => {\n    noto(); //let all:status[];\n\n    let helpto = [];\n    let helpfrom = []; //let fromarr:status[];\n\n    setFromarr(props.transitionList.map((f, i) => {\n      helpfrom[i] = true;\n      return f.from;\n    }));\n    setToarr(props.transitionList.map((t, i) => {\n      helpto[i] = true;\n      return t.to;\n    }));\n    setAll(toarr && fromarr && [...toarr, ...fromarr]);\n    console.log(all);\n    setIni(fromarr && fromarr.indexOf(props.initS)); // (ini>0)?(helpfrom[ini]=false,helpto[ini]=false ,func(toarr[ini])):null;\n\n    while (ini && ini >= 0) {\n      helpfrom[ini] = false;\n      helpto[ini] = false;\n      let a = all ? all.splice(all.indexOf(fromarr ? fromarr[ini] : all[-1]), 1) : all;\n      console.log(\"k\", all);\n      setAll(a);\n      let b = all ? all.splice(all.indexOf(toarr ? toarr[ini] : all[-1]), 1) : all;\n      setAll(b);\n      setStart(toarr && toarr[ini]);\n      setIni(fromarr && fromarr.indexOf(start));\n    }\n\n    console.log(all);\n    console.log(\"help\", helpfrom, helpto); // setA(recorphan1(props.transitionList,0,props.initS));\n    // console.log(\"noto\",a);\n    //recorphan1(props.transitionList,1,props.initS);\n  }, [props.initS, props.transitionList]); //const iso=(item:any)=>{return a?a.map(x=>{return isorph&&x?( x.name===item.name?setIsorph(false):null):null}):null}\n\n  const [txt2, setTxt2] = useState(); // const [a, setA] = useState<any[] | undefined>([]);\n  // const [isorph, setIsorph] = useState(true);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"test\",\n      ref: element => {\n        setTxt2(element);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        add(txt2 ? txt2.value : '');\n      },\n      children: \"add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 77\n    }, this), props.statusesList.map((item, i) => {\n      return /*#__PURE__*/_jsxDEV(Status, {\n        status: item,\n        delete: deleteStatus,\n        toarr: toarr,\n        initStatus: props.initS,\n        init: init,\n        isfinal: isfinal\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 18\n      }, this);\n    })]\n  }, void 0, true);\n};\n\n_s(StatusList, \"DeCW9oSGWahg77pikZbOanQqAOI=\");\n\n_c = StatusList;\n\nconst myMapStateToProps = state => {\n  return {\n    transitionList: state.transitionPart.transitions,\n    initS: state.statusPart.init1,\n    statusesList: state.statusPart.statuses\n  };\n};\n\nexport default connect(myMapStateToProps, {\n  deleteStatus,\n  initStatus,\n  addStatus,\n  deleteTransition,\n  getStatuses\n})(StatusList); // import React, { FunctionComponent, useEffect } from \"react\";\n// import { connect, } from 'react-redux';\n// import { status } from \"../models/status\";\n// import { deleteStatus,initStatus,addStatus, deleteTransition, getStatuses } from \"../store/actions\";\n// import { statusReducer } from \"../store/reducers\";\n// import Status from './Status';\n// import { useState } from \"react\";\n// import { transition } from \"../models/transition\";\n// import { hrtime } from \"process\";\n// import { queryHelpers } from \"@testing-library/dom\";\n// // interface StatusList Props {\n//  let inputi = React.createRef();\n// // },currentstatus:status\n// const StatusList  = (props: any) => {\n//   useEffect(() => {\n//   props.getStatuses();\n// },[]);\n// const recorphan=(arr:transition[],i:number,init:any,notorphan:any[])=>{\n//   if(init===null||i==arr.length){return;}\n// let h= arr.map((x:transition)=>{return x.from.name===init.name?x.to:null});\n// i++;notorphan.push(h);recorphan(arr,i,h,notorphan);\n// return notorphan; \n// }\n// const [notor, setNotor] = useState<any[] | undefined>();\n// // const help=(h:any)=>{\n// // notor?setNotor([...notor,h]):setNotor([h]);\n// // console.log(\"notor\",notor);\n// // }\n// let arr:(status|null)[]=[];\n// const recorphan1=(arr:transition[],i:number,init:any)=>{\n//   if(init===null||i==arr.length){return;}\n// let h= arr.map((x:transition)=>{return x.from.name===init.name?x.to:null});\n// i++;recorphan1(arr,i,h);\n// setNotor(h);console.log(\"h\",h);console.log(\"notor\",notor)\n// return h; \n// }\n//   console.log(props.initS)\n// const add=(name:string)=>{\n//   if (name!=''){\n// let  newstatus:status=new status(name);\n// props.addStatus(newstatus);\n// }\n// }\n// const deleteStatus=(status:status)=>{\n//   props.deleteStatus(status);\n//   props.transitionList.map((item:transition)=>{return (item.from.name===status.name||item.to.name===status.name)?props.deleteTransition(item.name):null})\n// }\n// const init=(s:status)=>{\n//   props.initStatus(s);\n// }\n// useEffect(() => {\n//   // setA(recorphan1(props.transitionList,0,props.initS));\n//   // console.log(\"noto\",a);\n//   recorphan1(props.transitionList,1,props.initS);\n// }, [props.initS,props.transitionList]);\n// const iso=(item:any)=>{return a?a.map(x=>{return isorph&&x?( x.name===item.name?setIsorph(false):null):null}):null}\n//   const [txt2, setTxt2] = useState<HTMLInputElement|null>();\n//   const [a, setA] = useState<any[] | undefined>([]);\n//   const [isorph, setIsorph] = useState(true);\n//     return  ( <>\n//     <h1>Add status</h1>\n//     <input type=\"test\" \tref={(element) => {  setTxt2 (element) ; }}></input><button onClick={()=>{add(txt2?txt2.value:'')}}>add</button>\n//   {/* {setA(recorphan(props.transitionList,0,props.initS,[]))}      */}\n// { }\n//  {/* { props.statusesList.map((item: any, i: any)=>{\n//    return a?a.map(x=>{return isorph&&x?(x.name===item.name?setIsorph(false):null):null}):null})}\n// */}\n//  { \n// props.statusesList.map((item: any, i: any)=>{\n//           return <Status key={i} status={item} delete={deleteStatus} initStatus={props.initS} init={init} isorphf={iso} isorph={isorph}/>;\n//         })   \n// }       \n//         </> ) \n// }  \n// const myMapStateToProps =(state:any) =>{\n//     return{\n//   transitionList:state.transitionPart.transitions,\n//   initS:state.statusPart.init1,\n//   statusesList:state.statusPart.statuses\n// }\n// }\n// export default connect(myMapStateToProps,{deleteStatus,initStatus,addStatus,deleteTransition,getStatuses})(StatusList); \n\nvar _c;\n\n$RefreshReg$(_c, \"StatusList\");","map":{"version":3,"sources":["D:/devtask/client/devtask/src/components/StatusList.tsx"],"names":["React","useEffect","connect","status","deleteStatus","initStatus","addStatus","deleteTransition","getStatuses","Status","useState","StatusList","props","console","log","initS","add","name","newstatus","transitionList","map","item","from","to","init","s","not","setNot","all","setAll","fromarr","setFromarr","toarr","setToarr","ini","setIni","start","setStart","noto","f","i","t","isfinal","includes","helpto","helpfrom","indexOf","a","splice","b","txt2","setTxt2","element","value","statusesList","myMapStateToProps","state","transitionPart","transitions","statusPart","init1","statuses"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useEffect } from \"react\";\r\nimport { connect, } from 'react-redux';\r\nimport { status } from \"../models/status\";\r\n\r\nimport { deleteStatus,initStatus,addStatus, deleteTransition, getStatuses } from \"../store/actions\";\r\nimport { statusReducer } from \"../store/reducers\";\r\nimport Status from './Status';\r\nimport { useState } from \"react\";\r\nimport { transition } from \"../models/transition\";\r\nimport { hrtime } from \"process\";\r\nimport { queryHelpers } from \"@testing-library/dom\";\r\n\r\n// interface StatusList Props {\r\n //let inputi = React.createRef();\r\n// },currentstatus:status\r\n\r\nconst StatusList  = (props: any) => {\r\n  useEffect(() => {\r\n  props.getStatuses();\r\n},[]);\r\n// const recorphan=(arr:transition[],i:number,init:any,notorphan:any[])=>{\r\n//   if(init===null||i==arr.length){return;}\r\n// let h= arr.map((x:transition)=>{return x.from.name===init.name?x.to:null});\r\n// i++;notorphan.push(h);recorphan(arr,i,h,notorphan);\r\n// return notorphan; \r\n// }\r\n//const [notor, setNotor] = useState<any[] | undefined>();\r\n// const help=(h:any)=>{\r\n// notor?setNotor([...notor,h]):setNotor([h]);\r\n// console.log(\"notor\",notor);\r\n// }\r\n// let arr:(status|null)[]=[];\r\n// const recorphan1=(arr:transition[],i:number,init:any)=>{\r\n//   if(init===null||i==arr.length){return;}\r\n// let h= arr.map((x:transition)=>{return x.from.name===init.name?x.to:null});\r\n// i++;recorphan1(arr,i,h);\r\n// (h);console.log(\"h\",h);\r\n// return h; \r\n// }\r\n  console.log(props.initS)\r\nconst add=(name:string)=>{\r\n  if (name!=''){\r\nlet  newstatus:status=new status(name);\r\nprops.addStatus(newstatus);\r\n}\r\n}\r\nconst deleteStatus=(status:status)=>{\r\n  props.deleteStatus(status);\r\n  props.transitionList.map((item:transition)=>{return (item.from.name===status.name||item.to.name===status.name)?props.deleteTransition(item.name):null})\r\n}\r\nconst init=(s:status)=>{\r\n  props.initStatus(s);\r\n} \r\n// const [b, setb] = useState(toarr.indexOf(item)>=0?true:false);\r\nconst [not,setNot]=useState();\r\nconst [all, setAll] = useState<status[]>();\r\nconst [fromarr, setFromarr] = useState<status[]>();const [toarr, setToarr] = useState<status[]>();\r\nconst [ini, setIni] = useState<number>();\r\nconst [start, setStart] = useState(props.initS);\r\nconst noto=()=>{\r\n  setFromarr(props.transitionList.map((f: transition,i:number )=>{return f.from}));\r\n  setToarr(props.transitionList.map((t: transition,i:number )=>{return t.to}));\r\n  console.log(fromarr,toarr,\"arraies\")\r\n}\r\nconst isfinal=(item:status)=>{console.log(\"toarr\",toarr,item);\r\n  if (toarr&&toarr.includes(item)) return false;\r\n  else return true;\r\n}\r\nuseEffect(() => {noto();\r\n  //let all:status[];\r\n  \r\n  let helpto:boolean[]=[];\r\n  let helpfrom:boolean[]=[];\r\n  //let fromarr:status[];\r\n  setFromarr(props.transitionList.map((f: transition,i:number )=>{helpfrom[i]=true;return f.from}));\r\n  setToarr(props.transitionList.map((t: transition,i:number )=>{helpto[i]=true;return t.to}));\r\n  setAll(toarr&&fromarr&&[...toarr,...fromarr]);console.log(all);\r\n  setIni(fromarr&&fromarr.indexOf(props.initS));\r\n  // (ini>0)?(helpfrom[ini]=false,helpto[ini]=false ,func(toarr[ini])):null;\r\n\r\nwhile(ini&&ini>=0){\r\n  helpfrom[ini]=false;helpto[ini]=false;\r\n  let a=all?all.splice((all.indexOf(fromarr?fromarr[ini]:all[-1])),1):all;console.log(\"k\",all);\r\n  setAll(a);\r\n let b=all? all.splice((all.indexOf(toarr?toarr[ini]:all[-1])),1):all\r\n setAll(b);\r\n  setStart(toarr&&toarr[ini]);\r\n  setIni(fromarr&&fromarr.indexOf(start));\r\n}\r\nconsole.log(all);console.log(\"help\",helpfrom,helpto);\r\n\r\n  // setA(recorphan1(props.transitionList,0,props.initS));\r\n  // console.log(\"noto\",a);\r\n  //recorphan1(props.transitionList,1,props.initS);\r\n}, [props.initS,props.transitionList]);\r\n//const iso=(item:any)=>{return a?a.map(x=>{return isorph&&x?( x.name===item.name?setIsorph(false):null):null}):null}\r\n  const [txt2, setTxt2] = useState<HTMLInputElement|null>();\r\n  // const [a, setA] = useState<any[] | undefined>([]);\r\n  // const [isorph, setIsorph] = useState(true);\r\n\r\n    return  ( <>\r\n    <h1>Add status</h1>\r\n    <input type=\"test\" \tref={(element) => {  setTxt2 (element) ; }}></input><button onClick={()=>{add(txt2?txt2.value:'')}}>add</button>\r\n  {/* {setA(recorphan(props.transitionList,0,props.initS,[]))}      */}\r\n{ }\r\n {/* { props.statusesList.map((item: any, i: any)=>{\r\n   return a?a.map(x=>{return isorph&&x?(x.name===item.name?setIsorph(false):null):null}):null})}\r\n*/}\r\n\r\n\r\n\r\n\r\n { \r\n\r\nprops.statusesList.map((item: any, i: any)=>{ \r\n          return <Status key={i} status={item} delete={deleteStatus}toarr={toarr} initStatus={props.initS} init={init} isfinal={isfinal} />;\r\n\r\n        })   \r\n      \r\n}       \r\n        </> ) \r\n\r\n}  \r\n\r\n \r\nconst myMapStateToProps =(state:any) =>{\r\n    return{\r\n  transitionList:state.transitionPart.transitions,\r\n  initS:state.statusPart.init1,\r\n  statusesList:state.statusPart.statuses\r\n\r\n}\r\n}\r\n\r\nexport default connect(myMapStateToProps,{deleteStatus,initStatus,addStatus,deleteTransition,getStatuses})(StatusList); \r\n\r\n\r\n// import React, { FunctionComponent, useEffect } from \"react\";\r\n// import { connect, } from 'react-redux';\r\n// import { status } from \"../models/status\";\r\n\r\n// import { deleteStatus,initStatus,addStatus, deleteTransition, getStatuses } from \"../store/actions\";\r\n// import { statusReducer } from \"../store/reducers\";\r\n// import Status from './Status';\r\n// import { useState } from \"react\";\r\n// import { transition } from \"../models/transition\";\r\n// import { hrtime } from \"process\";\r\n// import { queryHelpers } from \"@testing-library/dom\";\r\n\r\n// // interface StatusList Props {\r\n//  let inputi = React.createRef();\r\n// // },currentstatus:status\r\n\r\n// const StatusList  = (props: any) => {\r\n//   useEffect(() => {\r\n//   props.getStatuses();\r\n// },[]);\r\n// const recorphan=(arr:transition[],i:number,init:any,notorphan:any[])=>{\r\n//   if(init===null||i==arr.length){return;}\r\n// let h= arr.map((x:transition)=>{return x.from.name===init.name?x.to:null});\r\n// i++;notorphan.push(h);recorphan(arr,i,h,notorphan);\r\n// return notorphan; \r\n// }\r\n// const [notor, setNotor] = useState<any[] | undefined>();\r\n// // const help=(h:any)=>{\r\n// // notor?setNotor([...notor,h]):setNotor([h]);\r\n// // console.log(\"notor\",notor);\r\n// // }\r\n// let arr:(status|null)[]=[];\r\n// const recorphan1=(arr:transition[],i:number,init:any)=>{\r\n//   if(init===null||i==arr.length){return;}\r\n// let h= arr.map((x:transition)=>{return x.from.name===init.name?x.to:null});\r\n// i++;recorphan1(arr,i,h);\r\n// setNotor(h);console.log(\"h\",h);console.log(\"notor\",notor)\r\n// return h; \r\n// }\r\n//   console.log(props.initS)\r\n// const add=(name:string)=>{\r\n//   if (name!=''){\r\n// let  newstatus:status=new status(name);\r\n// props.addStatus(newstatus);\r\n// }\r\n// }\r\n// const deleteStatus=(status:status)=>{\r\n//   props.deleteStatus(status);\r\n//   props.transitionList.map((item:transition)=>{return (item.from.name===status.name||item.to.name===status.name)?props.deleteTransition(item.name):null})\r\n// }\r\n// const init=(s:status)=>{\r\n//   props.initStatus(s);\r\n// }\r\n// useEffect(() => {\r\n//   // setA(recorphan1(props.transitionList,0,props.initS));\r\n//   // console.log(\"noto\",a);\r\n//   recorphan1(props.transitionList,1,props.initS);\r\n// }, [props.initS,props.transitionList]);\r\n// const iso=(item:any)=>{return a?a.map(x=>{return isorph&&x?( x.name===item.name?setIsorph(false):null):null}):null}\r\n//   const [txt2, setTxt2] = useState<HTMLInputElement|null>();\r\n//   const [a, setA] = useState<any[] | undefined>([]);\r\n//   const [isorph, setIsorph] = useState(true);\r\n//     return  ( <>\r\n//     <h1>Add status</h1>\r\n//     <input type=\"test\" \tref={(element) => {  setTxt2 (element) ; }}></input><button onClick={()=>{add(txt2?txt2.value:'')}}>add</button>\r\n//   {/* {setA(recorphan(props.transitionList,0,props.initS,[]))}      */}\r\n// { }\r\n//  {/* { props.statusesList.map((item: any, i: any)=>{\r\n//    return a?a.map(x=>{return isorph&&x?(x.name===item.name?setIsorph(false):null):null}):null})}\r\n// */}\r\n//  { \r\n\r\n// props.statusesList.map((item: any, i: any)=>{\r\n//           return <Status key={i} status={item} delete={deleteStatus} initStatus={props.initS} init={init} isorphf={iso} isorph={isorph}/>;\r\n\r\n//         })   \r\n      \r\n// }       \r\n//         </> ) \r\n\r\n// }  \r\n\r\n \r\n// const myMapStateToProps =(state:any) =>{\r\n//     return{\r\n//   transitionList:state.transitionPart.transitions,\r\n//   initS:state.statusPart.init1,\r\n//   statusesList:state.statusPart.statuses\r\n\r\n// }\r\n// }\r\n\r\n// export default connect(myMapStateToProps,{deleteStatus,initStatus,addStatus,deleteTransition,getStatuses})(StatusList); \r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}