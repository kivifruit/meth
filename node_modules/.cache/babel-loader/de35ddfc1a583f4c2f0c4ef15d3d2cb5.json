{"ast":null,"code":"const initilize = {\n  transitions: []\n};\n\nconst f = (state, action) => {\n  let list = state.transitions.filter(t => {\n    t !== action.payloud;\n  });\n  return { ...state,\n    transitions: list\n  };\n};\n\nexport const transitionReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initilize;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"TRANSITIONADD\":\n      return { ...state,\n        songs: [...state.transitions, action.payloud]\n      };\n    // case \"TRANSITIONDELETE\":{\n    // //    let s1= state.songs.filter(s=>{s===action.payloud})\n    // //    state.songs.map((s,i=>{s===s1?state.songs.splice(i,1):null}))\n    //      return   f(state,action);}\n  }\n\n  return state;\n};","map":{"version":3,"sources":["D:/devtask/client/devtask/src/store/reducers/transition.ts"],"names":["initilize","transitions","f","state","action","list","filter","t","payloud","transitionReducer","type","songs"],"mappings":"AAGA,MAAMA,SAAS,GAAC;AACZC,EAAAA,WAAW,EAAC;AADA,CAAhB;;AAIA,MAAMC,CAAC,GAAC,CAACC,KAAD,EAAYC,MAAZ,KAA0B;AAClC,MAAIC,IAAiB,GAAEF,KAAK,CAACF,WAAN,CAAkBK,MAAlB,CAA0BC,CAAD,IAAiB;AAACA,IAAAA,CAAC,KAAGH,MAAM,CAACI,OAAX;AAAmB,GAA9D,CAAvB;AACA,SAAM,EAAC,GAAGL,KAAJ;AAAUF,IAAAA,WAAW,EAACI;AAAtB,GAAN;AAAkC,CAFlC;;AAGA,OAAO,MAAMI,iBAAiB,GAAC,YAAuD;AAAA,MAAtDN,KAAsD,uEAAhDH,SAAgD;AAAA,MAAtCI,MAAsC;;AAClF,UAAOA,MAAM,CAACM,IAAd;AACC,SAAK,eAAL;AACD,aAAM,EAAC,GAAGP,KAAJ;AAAUQ,QAAAA,KAAK,EAAC,CAAC,GAAGR,KAAK,CAACF,WAAV,EAAsBG,MAAM,CAACI,OAA7B;AAAhB,OAAN;AACA;AACA;AACA;AACA;AANA;;AAQJ,SAAOL,KAAP;AAGC,CAZM","sourcesContent":["import { transition } from \"../../models/transition\"\r\n\r\n\r\nconst initilize={\r\n    transitions:[]\r\n\r\n}\r\nconst f=(state: any,action: any)=>{\r\nlet list:transition[]= state.transitions.filter((t: transition)=>{t!==action.payloud})\r\nreturn{...state,transitions:list}}\r\nexport const transitionReducer=(state=initilize,action: { type: any; payloud: any })=>{\r\n    switch(action.type){\r\n     case \"TRANSITIONADD\":\r\n    return{...state,songs:[...state.transitions,action.payloud]}\r\n    // case \"TRANSITIONDELETE\":{\r\n    // //    let s1= state.songs.filter(s=>{s===action.payloud})\r\n    // //    state.songs.map((s,i=>{s===s1?state.songs.splice(i,1):null}))\r\n    //      return   f(state,action);}\r\n}\r\nreturn state;\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}