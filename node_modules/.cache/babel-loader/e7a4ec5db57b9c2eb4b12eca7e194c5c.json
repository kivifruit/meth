{"ast":null,"code":"var _jsxFileName = \"D:\\\\devtask\\\\client\\\\devtask\\\\src\\\\components\\\\TransitionList.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { connect } from 'react-redux'; // import { isTemplateExpression } from \"typescript\";\n\nimport { status } from \"../models/status\";\nimport { transition } from \"../models/transition\";\nimport { deleteTransition, addTransition } from '../store/actions';\nimport Transition from \"./Transition\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TransitionList = props => {\n  _s();\n\n  const [txt2, setTxt2] = useState();\n  const [from, setFrom] = useState();\n  const [to, setTo] = useState();\n\n  const deleteTransition = transition => {\n    props.deleteTransition(transition);\n  };\n\n  const add = (name, from, to) => {\n    //should avoid ''?\n    let fromtoset = new status(from);\n    let totoset = new status(to);\n    let tran = new transition(name, fromtoset, totoset);\n    props.addTransition(tran);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add transitions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), \"name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"test\",\n      ref: element => {\n        setTxt2(element);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this), \"from \", /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"from\",\n      ref: element => {\n        setFrom(element);\n      },\n      children: [\" \", props.statusesList.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.name,\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 123\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }, this), \"to\", /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"to\",\n      ref: element => {\n        setTo(element);\n      },\n      children: props.statusesList.map(item => {\n        console.log(\"n\", item.name);\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.name,\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 143\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        add(txt2 ? txt2.value : '', from ? from.value : '', to ? to.value : '');\n      },\n      children: \"add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), props.transitionList.map((item, i) => {\n      return /*#__PURE__*/_jsxDEV(Transition, {\n        transitionName: item.name,\n        transitionFrom: item.from.name,\n        transitionTo: item.to.name,\n        delete: deleteTransition\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 18\n      }, this);\n    })]\n  }, void 0, true);\n};\n\n_s(TransitionList, \"oak6yG2shygaz3rMSLMXUIaujk8=\");\n\n_c = TransitionList;\n\nconst myMapStateToProps = state => {\n  return {\n    transitionList: state.transitionPart.transitions,\n    statusesList: state.statusPart.statuses\n  };\n};\n\nexport default connect(myMapStateToProps, {\n  deleteTransition,\n  addTransition\n})(TransitionList);\n\nvar _c;\n\n$RefreshReg$(_c, \"TransitionList\");","map":{"version":3,"sources":["D:/devtask/client/devtask/src/components/TransitionList.tsx"],"names":["useState","connect","status","transition","deleteTransition","addTransition","Transition","TransitionList","props","txt2","setTxt2","from","setFrom","to","setTo","add","name","fromtoset","totoset","tran","element","statusesList","map","item","console","log","value","transitionList","i","myMapStateToProps","state","transitionPart","transitions","statusPart","statuses"],"mappings":"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","sourcesContent":["import { ReactChild, ReactFragment, ReactPortal, useState } from \"react\";\r\nimport { connect, } from 'react-redux';\r\n// import { isTemplateExpression } from \"typescript\";\r\nimport { status } from \"../models/status\";\r\nimport { transition } from \"../models/transition\";\r\n import {deleteTransition,addTransition}from '../store/actions'\r\nimport Transition from \"./Transition\";\r\nconst TransitionList= (props: any) => {\r\n    const [txt2, setTxt2] = useState<HTMLInputElement|null>();\r\n    const [from, setFrom] = useState<HTMLSelectElement|null>();\r\n    const [to, setTo] = useState<HTMLSelectElement|null>();\r\n    const deleteTransition=(transition:transition)=>{\r\n        props.deleteTransition(transition);\r\n      }\r\n    const add=(name:string,from:string,to:string)=>{\r\n//should avoid ''?\r\nlet fromtoset:status=new status(from);\r\nlet totoset:status=new status(to);\r\nlet tran:transition=new transition(name,fromtoset,totoset);\r\nprops.addTransition(tran);\r\n      }\r\n    return ( <>\r\n      <h1>Add transitions</h1>\r\n      name:<input type=\"test\" \tref={(element) => {  setTxt2 (element) ; }}></input>\r\n     from <select name=\"from\" ref={(element) => {  setFrom (element) } } > {props.statusesList.map((item:status)=>{ return<option value={item.name}>{item.name}</option>})}</select>\r\n      to<select name=\"to\" ref={(element) => {  setTo (element) } }>{props.statusesList.map((item: status)=>{console.log(\"n\",item.name);return <option value={item.name}>{item.name}</option>})}</select>\r\n      <button onClick={()=>{add(txt2?txt2.value:'',from?from.value:'',to?to.value:'')}}>add</button>\r\n    {\r\nprops.transitionList.map((item: any, i: any)=>{\r\n          return <Transition key={i}\r\n           transitionName={item.name} \r\n           transitionFrom={item.from.name}\r\n           transitionTo={item.to.name}\r\n           delete={deleteTransition} />;\r\n        })\r\n        }   \r\n    </> );\r\n}\r\nconst myMapStateToProps =(state:any) =>{\r\n    return{\r\n  transitionList:state.transitionPart.transitions,\r\n  statusesList:state.statusPart.statuses\r\n}\r\n}\r\nexport default connect(myMapStateToProps,{deleteTransition,addTransition})(  TransitionList );\r\n\r\n"]},"metadata":{},"sourceType":"module"}