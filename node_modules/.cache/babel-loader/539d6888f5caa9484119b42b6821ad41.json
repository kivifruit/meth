{"ast":null,"code":"var _jsxFileName = \"D:\\\\devtask\\\\client\\\\devtask\\\\src\\\\components\\\\TransitionList.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { connect } from 'react-redux'; // import { isTemplateExpression } from \"typescript\";\n\nimport { status } from \"../models/status\";\nimport { transition } from \"../models/transition\";\nimport { deleteTransition, addTransition, getTransitions } from '../store/actions';\nimport Transition from \"./Transition\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TransitionList = props => {\n  _s();\n\n  useEffect(() => {\n    props.getTransitions();\n  }, []);\n  const [txt2, setTxt2] = useState();\n  const [from, setFrom] = useState();\n  const [to, setTo] = useState();\n\n  const deleteTransition1 = name => {\n    props.deleteTransition(name);\n  };\n\n  const add = (name, from, to) => {\n    //should avoid ''?\n    let fromtoset = new status(from);\n    let totoset = new status(to);\n    let tran = new transition(name, fromtoset, totoset);\n    props.addTransition(tran);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Add transitions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), \"name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"test\",\n      ref: element => {\n        setTxt2(element);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this), \"from \", /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"from\",\n      ref: element => {\n        setFrom(element);\n      },\n      children: [\" \", props.statusesList.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.name,\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 123\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }, this), \"to\", /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"to\",\n      ref: element => {\n        setTo(element);\n      },\n      children: props.statusesList.map(item => {\n        console.log(\"n\", item.name);\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.name,\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 143\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        add(txt2 ? txt2.value : '', from ? from.value : '', to ? to.value : '');\n      },\n      children: \"add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), props.transitionList.map((item, i) => {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(Transition, {\n          transitionName: item.name,\n          transitionFrom: item.from.name,\n          transitionTo: item.to.name,\n          delete: deleteTransition1\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 18\n      }, this);\n    })]\n  }, void 0, true);\n};\n\n_s(TransitionList, \"MIIYbXAdQK78BuYPVWuPeQDn5e0=\");\n\n_c = TransitionList;\n\nconst myMapStateToProps = state => {\n  return {\n    transitionList: state.transitionPart.transitions,\n    statusesList: state.statusPart.statuses\n  };\n};\n\nexport default connect(myMapStateToProps, {\n  deleteTransition,\n  addTransition,\n  getTransitions\n})(TransitionList);\n\nvar _c;\n\n$RefreshReg$(_c, \"TransitionList\");","map":{"version":3,"sources":["D:/devtask/client/devtask/src/components/TransitionList.tsx"],"names":["useEffect","useState","connect","status","transition","deleteTransition","addTransition","getTransitions","Transition","TransitionList","props","txt2","setTxt2","from","setFrom","to","setTo","deleteTransition1","name","add","fromtoset","totoset","tran","element","statusesList","map","item","console","log","value","transitionList","i","myMapStateToProps","state","transitionPart","transitions","statusPart","statuses"],"mappings":"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","sourcesContent":["import { ReactChild, ReactFragment, ReactPortal, useEffect, useState } from \"react\";\r\nimport { connect, } from 'react-redux';\r\n// import { isTemplateExpression } from \"typescript\";\r\nimport { status } from \"../models/status\";\r\nimport { transition } from \"../models/transition\";\r\n import {deleteTransition,addTransition, getTransitions}from '../store/actions'\r\nimport Transition from \"./Transition\";\r\nconst TransitionList= (props: any) => {\r\n    useEffect(() => {\r\n        props.getTransitions();\r\n      },[]);\r\n    const [txt2, setTxt2] = useState<HTMLInputElement|null>();\r\n    const [from, setFrom] = useState<HTMLSelectElement|null>();\r\n    const [to, setTo] = useState<HTMLSelectElement|null>();\r\n    const deleteTransition1=(name:string)=>{\r\n        props.deleteTransition(name);\r\n      }\r\n    const add=(name:string,from:string,to:string)=>{\r\n//should avoid ''?\r\nlet fromtoset:status=new status(from);\r\nlet totoset:status=new status(to);\r\nlet tran:transition=new transition(name,fromtoset,totoset);\r\nprops.addTransition(tran);\r\n      }\r\n    return ( <>\r\n      <h3>Add transitions</h3>\r\n      name:<input type=\"test\" \tref={(element) => {  setTxt2 (element) ; }}></input>\r\n     from <select name=\"from\" ref={(element) => {  setFrom (element) } } > {props.statusesList.map((item:status)=>{ return<option value={item.name}>{item.name}</option>})}</select>\r\n      to<select name=\"to\" ref={(element) => {  setTo (element) } }>{props.statusesList.map((item: status)=>{console.log(\"n\",item.name);return <option value={item.name}>{item.name}</option>})}</select>\r\n      <button onClick={()=>{add(txt2?txt2.value:'',from?from.value:'',to?to.value:'')}}>add</button>\r\n    {\r\nprops.transitionList.map((item: any, i: any)=>{\r\n          return <ul><Transition key={i}\r\n           transitionName={item.name} \r\n           transitionFrom={item.from.name}\r\n           transitionTo={item.to.name}\r\n           delete={deleteTransition1} /></ul>;\r\n        })\r\n        }   \r\n    </> );\r\n}\r\nconst myMapStateToProps =(state:any) =>{\r\n    return{\r\n  transitionList:state.transitionPart.transitions,\r\n  statusesList:state.statusPart.statuses\r\n}\r\n}\r\nexport default connect(myMapStateToProps,{deleteTransition,addTransition, getTransitions})(  TransitionList );\r\n\r\n"]},"metadata":{},"sourceType":"module"}