{"ast":null,"code":"var _jsxFileName = \"D:\\\\devtask\\\\client\\\\devtask\\\\src\\\\components\\\\StatusList.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { connect } from 'react-redux';\nimport { status } from \"../models/status\";\nimport { deleteStatus, initStatus, addStatus, deleteTransition } from \"../store/actions\";\nimport Status from './Status';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// interface StatusList Props {\nlet inputi = /*#__PURE__*/React.createRef(); // },currentstatus:status\n\nconst StatusList = props => {\n  _s();\n\n  const recorphan = (arr, i, init, notorphan) => {\n    if (init === null || i == arr.length) {\n      return;\n    }\n\n    let h = arr.map(x => {\n      return x.from.name === init.name ? x.to : null;\n    });\n    i++;\n    notorphan.push(h);\n    recorphan(arr, i, h, notorphan);\n    return notorphan;\n  };\n\n  const recorphan1 = (arr, i, init) => {\n    if (init === null || i == arr.length) {\n      return;\n    }\n\n    let h = arr.map(x => {\n      return x.from.name === init.name ? x.to : null;\n    });\n    i++;\n    recorphan1(arr, i, h);\n    return h;\n  };\n\n  console.log(props.initS);\n\n  const add = name => {\n    if (name != '') {\n      let newstatus = new status(name);\n      props.addStatus(newstatus);\n    }\n  };\n\n  const deleteStatus = status => {\n    props.deleteStatus(status);\n    props.transitionList.map(item => {\n      return item.from.name === status.name || item.to.name === status.name ? props.deleteTransition(item.name) : null;\n    });\n  };\n\n  const init = s => {\n    props.initStatus(s);\n  };\n\n  const [txt2, setTxt2] = useState();\n  const [a, setA] = useState([]);\n  const [isorph, setIsorph] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"test\",\n      ref: element => {\n        setTxt2(element);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        add(txt2 ? txt2.value : '');\n      },\n      children: \"add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 77\n    }, this), setA(recorphan(props.transitionList, 0, props.initS, [])), \"    \", props.statusesList.map((item, i) => {\n      item === recorphan1(props.transitionList, 0, props.initS) ? setIsorph(true) : null;\n      return /*#__PURE__*/_jsxDEV(Status, {\n        status: item,\n        delete: deleteStatus,\n        initStatus: props.initS,\n        init: init,\n        isorph: isorph\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 18\n      }, this);\n    })]\n  }, void 0, true);\n};\n\n_s(StatusList, \"P0DxAp8kxYy+J88ZysFSBr1HeEw=\");\n\n_c = StatusList;\n\nconst myMapStateToProps = state => {\n  return {\n    transitionList: state.transitionPart.transitions,\n    initS: state.statusPart.init1,\n    statusesList: state.statusPart.statuses\n  };\n};\n\nexport default connect(myMapStateToProps, {\n  deleteStatus,\n  initStatus,\n  addStatus,\n  deleteTransition\n})(StatusList);\n\nvar _c;\n\n$RefreshReg$(_c, \"StatusList\");","map":{"version":3,"sources":["D:/devtask/client/devtask/src/components/StatusList.tsx"],"names":["React","connect","status","deleteStatus","initStatus","addStatus","deleteTransition","Status","useState","inputi","createRef","StatusList","props","recorphan","arr","i","init","notorphan","length","h","map","x","from","name","to","push","recorphan1","console","log","initS","add","newstatus","transitionList","item","s","txt2","setTxt2","a","setA","isorph","setIsorph","element","value","statusesList","myMapStateToProps","state","transitionPart","transitions","statusPart","init1","statuses"],"mappings":"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","sourcesContent":["import React, { FunctionComponent } from \"react\";\r\nimport { connect, } from 'react-redux';\r\nimport { status } from \"../models/status\";\r\n\r\nimport { deleteStatus,initStatus,addStatus, deleteTransition } from \"../store/actions\";\r\nimport { statusReducer } from \"../store/reducers\";\r\nimport Status from './Status';\r\nimport { useState } from \"react\";\r\nimport { transition } from \"../models/transition\";\r\nimport { hrtime } from \"process\";\r\n\r\n// interface StatusList Props {\r\n let inputi = React.createRef();\r\n// },currentstatus:status\r\n\r\nconst StatusList  = (props: any) => {\r\nconst recorphan=(arr:transition[],i:number,init:any,notorphan:any[])=>{\r\n  if(init===null||i==arr.length){return;}\r\nlet h= arr.map((x:transition)=>{return x.from.name===init.name?x.to:null});\r\ni++;notorphan.push(h);recorphan(arr,i,h,notorphan);\r\nreturn notorphan; \r\n}\r\nconst recorphan1=(arr:transition[],i:number,init:any)=>{\r\n  if(init===null||i==arr.length){return;}\r\nlet h= arr.map((x:transition)=>{return x.from.name===init.name?x.to:null});\r\ni++;recorphan1(arr,i,h);\r\nreturn h; \r\n}\r\n  console.log(props.initS)\r\nconst add=(name:string)=>{\r\n  if (name!=''){\r\nlet  newstatus:status=new status(name);\r\nprops.addStatus(newstatus);\r\n}\r\n}\r\nconst deleteStatus=(status:status)=>{\r\n  props.deleteStatus(status);\r\n  props.transitionList.map((item:transition)=>{return item.from.name===status.name||item.to.name===status.name?props.deleteTransition(item.name):null})\r\n}\r\nconst init=(s:status)=>{\r\n  props.initStatus(s);\r\n}\r\n  const [txt2, setTxt2] = useState<HTMLInputElement|null>();\r\n  const [a, setA] = useState<any[] | undefined>([]);\r\n  const [isorph, setIsorph] = useState(false);\r\n    return  ( <>\r\n    <h1>Add status</h1>\r\n    <input type=\"test\" \tref={(element) => {  setTxt2 (element) ; }}></input><button onClick={()=>{add(txt2?txt2.value:'')}}>add</button>\r\n  {setA(recorphan(props.transitionList,0,props.initS,[]))}    { \r\n   \r\nprops.statusesList.map((item: any, i: any)=>{\r\n (item===recorphan1(props.transitionList,0,props.initS))?setIsorph(true):null\r\n          return <Status key={i} status={item} delete={deleteStatus} initStatus={props.initS} init={init} isorph={isorph}/>;\r\n\r\n        \r\n        })}   \r\n      \r\n       \r\n        </> ) \r\n\r\n  \r\n}\r\n \r\nconst myMapStateToProps =(state:any) =>{\r\n    return{\r\n  transitionList:state.transitionPart.transitions,\r\n  initS:state.statusPart.init1,\r\n  statusesList:state.statusPart.statuses\r\n\r\n}\r\n}\r\n\r\nexport default connect(myMapStateToProps,{deleteStatus,initStatus,addStatus,deleteTransition})(StatusList); \r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}