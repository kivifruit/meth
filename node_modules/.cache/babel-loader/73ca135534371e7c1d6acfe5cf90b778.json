{"ast":null,"code":"import { transition } from \"../../models/transition\";\nimport { status } from '../../models/status';\n//const [statusList, setstatusList] = useState<status[]>([]);\n//should connect to status reducer\n// const f=(props:any)=>{\n//      let d:status[]=props.stasusList;setstatusList(d)\n// return(null)\n// }\nconst initilize = {\n  transitions: [new transition(\"b\", new status(\"start\"), new status(\"cancle\"))] // statusList?statusList:\n\n};\nexport const transitionReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initilize;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"TRANSITIONADD\":\n      //if from and to exists in songlist\n      //    let from=   statusList.map(s=>{return s.name===action.payloud.from.name?s:null});\n      //    let to =statusList.map(s=>{return s.name===action.payloud.to.name?s:null});\n      //    let obj={...state}\n      // to?from?(  obj={...state,transitions:[...state.transitions,action.payloud]}):null:null\n      // return obj\n      return { ...state,\n        transitions: [...state.transitions, action.payloud]\n      };\n\n    case \"TRANSITIONDELETE\":\n      //    let s1= state.songs.filter(s=>{s===action.payloud})\n      //    state.songs.map((s,i=>{s===s1?state.songs.splice(i,1):null}))\n      let list = state.transitions.filter(t => {\n        return t.name !== action.payloud;\n      });\n      return { ...state,\n        transitions: list\n      };\n\n    case \"TRANSITIONFILL\":\n      return { ...state,\n        transitions: action.payloud\n      };\n\n    case \"DELETEALL\":\n      return { ...state,\n        transitions: []\n      };\n  }\n\n  return state;\n}; // function myMapStateToProps( state: any) {\n//   return{  statusList:state.statusPart.statuses}\n// }\n//export default connect(myMapStateToProps,{})(f);","map":{"version":3,"sources":["D:/devtask/client/devtask/src/store/reducers/transition.ts"],"names":["transition","status","initilize","transitions","transitionReducer","state","action","type","payloud","list","filter","t","name"],"mappings":"AAAA,SAASA,UAAT,QAA2B,yBAA3B;AACA,SAAQC,MAAR,QAAoB,qBAApB;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEC,MAAMC,SAAS,GAAC;AACbC,EAAAA,WAAW,EAAC,CAAC,IAAIH,UAAJ,CAAe,GAAf,EAAmB,IAAIC,MAAJ,CAAW,OAAX,CAAnB,EAAuC,IAAIA,MAAJ,CAAW,QAAX,CAAvC,CAAD,CADC,CAEjB;;AAFiB,CAAhB;AAIA,OAAO,MAAMG,iBAAiB,GAAC,YAAuD;AAAA,MAAtDC,KAAsD,uEAAhDH,SAAgD;AAAA,MAAtCI,MAAsC;;AACnF,UAAOA,MAAM,CAACC,IAAd;AACC,SAAK,eAAL;AACI;AACN;AACA;AACA;AACA;AACA;AACA,aAAO,EAAC,GAAGF,KAAJ;AAAUF,QAAAA,WAAW,EAAC,CAAC,GAAGE,KAAK,CAACF,WAAV,EAAsBG,MAAM,CAACE,OAA7B;AAAtB,OAAP;;AACC,SAAK,kBAAL;AACA;AACA;AACA,UAAIC,IAAI,GAAEJ,KAAK,CAACF,WAAN,CAAkBO,MAAlB,CAAyBC,CAAC,IAAE;AAAC,eAAOA,CAAC,CAACC,IAAF,KAASN,MAAM,CAACE,OAAvB;AAA+B,OAA5D,CAAV;AACI,aAAM,EAAC,GAAGH,KAAJ;AAAUF,QAAAA,WAAW,EAACM;AAAtB,OAAN;;AACA,SAAK,gBAAL;AACC,aAAM,EAAC,GAAGJ,KAAJ;AAAUF,QAAAA,WAAW,EAACG,MAAM,CAACE;AAA7B,OAAN;;AACD,SAAK,WAAL;AACC,aAAO,EAAC,GAAGH,KAAJ;AAAUF,QAAAA,WAAW,EAAC;AAAtB,OAAP;AAjBL;;AAmBJ,SAAOE,KAAP;AACC,CArBO,C,CAsBR;AACA;AACA;AAEA","sourcesContent":["import { transition } from \"../../models/transition\"\r\nimport {status}from '../../models/status'\r\nimport { connect } from \"react-redux\"\r\nimport { useState } from \"react\";\r\n//const [statusList, setstatusList] = useState<status[]>([]);\r\n//should connect to status reducer\r\n// const f=(props:any)=>{\r\n//      let d:status[]=props.stasusList;setstatusList(d)\r\n// return(null)\r\n\r\n// }\r\n\r\n const initilize={\r\n    transitions:[new transition(\"b\",new status(\"start\"),new status(\"cancle\"))]\r\n// statusList?statusList:\r\n}\r\n export const transitionReducer=(state=initilize,action: { type: any; payloud: any })=>{\r\n    switch(action.type){\r\n     case \"TRANSITIONADD\":\r\n         //if from and to exists in songlist\r\n   //    let from=   statusList.map(s=>{return s.name===action.payloud.from.name?s:null});\r\n   //    let to =statusList.map(s=>{return s.name===action.payloud.to.name?s:null});\r\n   //    let obj={...state}\r\n   // to?from?(  obj={...state,transitions:[...state.transitions,action.payloud]}):null:null\r\n   // return obj\r\n   return {...state,transitions:[...state.transitions,action.payloud]}\r\n    case \"TRANSITIONDELETE\":\r\n    //    let s1= state.songs.filter(s=>{s===action.payloud})\r\n    //    state.songs.map((s,i=>{s===s1?state.songs.splice(i,1):null}))\r\n    let list= state.transitions.filter(t=>{return t.name!==action.payloud})\r\n        return{...state,transitions:list}\r\n        case \"TRANSITIONFILL\":\r\n         return{...state,transitions:action.payloud}\r\n        case \"DELETEALL\":\r\n         return {...state,transitions:[]}\r\n}\r\nreturn state;\r\n}\r\n// function myMapStateToProps( state: any) {\r\n//   return{  statusList:state.statusPart.statuses}\r\n// }\r\n\r\n//export default connect(myMapStateToProps,{})(f); \r\n\r\n"]},"metadata":{},"sourceType":"module"}